testbed.yaml
---------------

devices:
  n9k1:
    connections:
      cli:
        ip: 10.133.35.148
        port: 22
        protocol: ssh

    credentials:
      default:
        password: tcs123
        username: admin
      enable:
        password: tcs123
    os: nxos
    type: nxos
    alias: 'dut1'

  n9k4:
    alias: 'dut2'
    connections:
      cli:
        ip: 10.133.35.143
        port: 22
        protocol: ssh

    credentials:
      default:
        password: tcs123
        username: admin
      enable:
        password: tcs123
    os: nxos
    type: nxos


  n9k3:
    alias: 'dut3'
    connections:
      cli:
        ip: 10.133.35.152
        port: 22
        protocol: ssh

    credentials:
      default:
        password: tcs123
        username: admin
      enable:
        password: tcs123
    os: nxos
    type: nxos

################topology#################
topology:
  n9k1:
    interfaces:
      Ethernet1/5:
        link: uut1_uut3_1
        type: ethernet
  n9k4:
    interfaces:
      Ethernet1/9:
        link: uut2_uut3_1
        type: ethernet
  n9k3:
    interfaces:
      Ethernet1/5:
        link: uut3_uut1_1
        type: ethernet
      Ethernet1/9:
        link: uut3_uut2_1
        type: ethernet




acl_datafile.yaml
-----------------

device1:
    intf: "ethernet1/5"
    ip_address: "192.168.60.1"
device2:
    intf1: "ethernet1/5"
    ip_address1: "192.168.60.2"
    intf2: "ethernet1/9"
    ip_address2: "192.168.11.1"
device3:
    intf: "ethernet1/9"
    ip_address: "192.168.11.2"
subnet_mask: "255.255.255.0"
acl_name: 'acl123'
rule1: 'permit icmp 192.168.11.1/24 any'
rule2: 'deny icmp 192.168.11.1/24 any'
rule3: 'permit icmp 192.168.60.1/24 any'
bound: 'in'
bound1: 'out'




acl_testcases.py
----------------

from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging
import pdb
from pyats.results import Passed,Failed
from pyats.async_.exceptions import *
from acl_lib import acl_common_functions
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
import time
global device_list

#easypy job_file -t testbed_yaml_file -datafile datafile

class CommonSetup(aetest.CommonSetup):

    @aetest.subsection
    def print_testbed_information(self,testbed):
        pdb.set_trace()
        global uut1,uut2,uut3,device_list,device_info
        uut1 = testbed.devices['dut1']
        self.parent.parameters.update(uut1 = uut1)
        uut2 = testbed.devices['dut3']
        self.parent.parameters.update(uut2 = uut2)
        uut3 = testbed.devices['dut2']
        self.parent.parameters.update(uut3 = uut3)

        device_list = [uut1,uut2,uut3]
        device_info = {}

        if not testbed:
            logging.info("No testbed was provided to script launch")
        else:
            uut = testbed.devices['dut1']
            for device in testbed:
                logging.info("Device name : %s "%device.name)
                device_info.update({device.name: []})
                for intf in device:
                   logging.info("Interface : %s"%intf.name)
                   device_info[device.name].append(intf.name)
                   if intf.link:
                       logging.info("Link : %s"%intf.link.name)
                   else:
                       logging.info("Link : None")
            logger.info("Device and interfaces used for acl feature")
            logger.info(device_info)

    @aetest.subsection
    def connect_to_devices(self,testbed):
        logger.info("Connecting to devices")
        for uut in device_list:
            uut.connect()
            if uut.is_connected() == True:
                logging.info("Successfully connected to device %s"%uut.name)
                output = uut.execute('show version')
                res = acl_common_functions.sh_version(output)
                logging.info("Software version :%s"%res['version'])
                logging.info("Image File :%s"%res['image'])
            else:
                logging.info("Device %s not connected"%uut.name)

    @aetest.subsection
    def configure_ip_address_to_interfaces(self,testbed):
        logger.info("Assign ip address to interfaces")
        pdb.set_trace()
        logger.info(device_info.keys())
        #for dev in device_info.keys():
        acl_common_functions.configure_ip_address(uut1,device1['intf'],device1['ip_address'],subnet_mask)
        acl_common_functions.configure_ip_address(uut2,device2['intf1'],device2['ip_address1'],subnet_mask)
        acl_common_functions.configure_ip_address(uut2,device2['intf2'],device2['ip_address2'],subnet_mask)
        acl_common_functions.configure_ip_address(uut3,device3['intf'],device3['ip_address'],subnet_mask)

    @aetest.subsection
    def enable_rip_on_device(self,testbed):
        logging.info("Enable rip on devices")
        for uut in device_list:
            acl_common_functions.enable_rip(uut)

    @aetest.subsection
    def configure_rip_on_devices(self,testbed):
        logger.info("Configure rip on interfaces")
        acl_common_functions.configure_rip(uut1,device1['intf'])
        acl_common_functions.configure_rip(uut2,device2['intf1'])
        acl_common_functions.configure_rip(uut2,device2['intf2'])
        acl_common_functions.configure_rip(uut3,device3['intf'])

#@aetest.skip("testing fourth scenario")
class acl_testcase_permit(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self,testbed):

        logger.info("Configure acl on device3:{}".format(uut2.name))
        acl_common_functions.configure_acl(uut2,acl_name,rule1)

        logger.info("Configure acl in interface")
        acl_common_functions.configure_acl_interface(uut2,device2['intf1'],acl_name,bound)

    @aetest.test
    def check_ping_after_permit_acl(self,testbed):
        logger.info("Check acl configured or not ")
        acl_config = uut2.execute("show access-list {}".format(acl_name))
        logger.info(acl_config)
        if acl_name in acl_config:
            logger.info("ACL configured on device")
        else:
            self.errored('Acl is not configured on device')

        logger.info("Ping the ip configured on device2: {}".format(uut3.name))
        for i in range(5):
            result = uut2.execute("ping {}".format(device3['ip_address']))
            time.sleep(10)
        res_dict = acl_common_functions.validate_ping(result)
        time.sleep(10)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict)
        logger.info("++++++++++++++++++++++++++++")

        if ((res_dict['sent_pkt'] == res_dict['receive_pkt']) and (res_dict['pkt_loss'] == '0.00%')):
            logger.info("Sent : {} packets and received: {} packets and packet loss: {}".format(res_dict['sent_pkt'],res_dict['receive_pkt'],res_dict['pkt_loss']))
            self.passed("Success: After applied permit rule for acl, ping got successful")
        else:
            logger.info("Sent : {} packets and received: {} packets and packet loss: {}".format(res_dict['sent_pkt'],res_dict['receive_pkt']
,res_dict['pkt_loss']))
            self.failed("Failed: After applied permit rule for acl, ping got failed")


    @aetest.cleanup
    def unconfigure_acl_on_device(self,testbed):
        logger.info("Unconfigure acl in interface")
        acl_common_functions.unconfigure_acl_interface(uut2,device2['intf2'],acl_name,bound)

        logger.info("Unconfigure acl on device3:{}".format(uut2.name))
        acl_common_functions.unconfigure_acl(uut2,acl_name)

#@aetest.skip("testing fourth scenario")
class acl_testcase_deny(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self,testbed):

        logger.info("Configure acl on device1:{}".format(uut1.name))
        acl_common_functions.configure_acl(uut1,acl_name,rule2)

        logger.info("Configure acl in interface")
        acl_common_functions.configure_acl_interface(uut1,device1['intf'],acl_name,bound)

    @aetest.test
    def check_ping_after_deny_acl(self,testbed):

        logger.info("Check acl configured or not ")
        acl_config = uut1.execute("show access-list {}".format(acl_name))
        logger.info(acl_config)
        if acl_name in acl_config:
            logger.info("ACL configured on device")
        else:
            self.errored('Acl is not configured on device')

        logger.info("Ping the ip configured on device2: {}".format(uut3.name))
        for i in range(3):
            result = uut1.execute("ping {}".format(device3['ip_address']))
        res_dict = acl_common_functions.validate_ping(result)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict)
        logger.info("++++++++++++++++++++++++++++")

        if ((res_dict['sent_pkt'] != res_dict['receive_pkt']) and (res_dict['pkt_loss'] == '100.00%')):
            logger.info("Sent : {} packets and received: {} packets and packet loss: {}".format(res_dict['sent_pkt'],res_dict['receive_pkt'],res_dict['pkt_loss']))
            self.passed("Success: After applied deny rule for acl ping got failed")
        else:
            logger.info("Sent : {} packets and received: {} packets and packet loss: {}".format(res_dict['sent_pkt'],res_dict['receive_pkt']
,res_dict['pkt_loss']))
            self.failed("Failed: After applied deny rule for acl ping got successful")

    @aetest.cleanup
    def unconfigure_acl_on_device(self,testbed):
        logger.info("Unconfigure acl in interface")
        acl_common_functions.unconfigure_acl_interface(uut1,device1['intf'],acl_name,bound)

        logger.info("Unconfigure acl on device3:{}".format(uut1.name))
        acl_common_functions.unconfigure_acl(uut1,acl_name)

#@aetest.skip("testing fourth scenario")
class acl_testcase_multiple_rules(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self,testbed):

        logger.info("Configure acl on device1:{}".format(uut1.name))
        acl_common_functions.configure_acl(uut1,acl_name,rule3)

        logger.info("Configure acl on device1:{}".format(uut1.name))
        acl_common_functions.configure_acl(uut1,acl_name,rule2)

        logger.info("Configure acl in interface")
        acl_common_functions.configure_acl_interface(uut1,device1['intf'],acl_name,bound)

    @aetest.test
    def check_ping_after_multiple_acl_rules(self,testbed):

        logger.info("Check acl configured or not ")
        acl_config = uut1.execute("show access-list {}".format(acl_name))
        logger.info(acl_config)
        if acl_name in acl_config:
            logger.info("ACL configured on device")
        else:
            self.errored('Acl is not configured on device')

        logger.info("Ping the ip configured on device3 and device1: {} {}".format(uut1.name,uut3.name))
        for i in range(1):
            result2 = uut1.execute("ping {}".format(device3['ip_address']))
        res_dict2 = acl_common_functions.validate_ping(result2)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict2)
        logger.info("++++++++++++++++++++++++++++")

        for i in range(3):
            result1 = uut2.execute("ping {}".format(device1['ip_address']))
        res_dict1 = acl_common_functions.validate_ping(result1)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict1)
        logger.info("++++++++++++++++++++++++++++")


        if (res_dict1['sent_pkt'] == res_dict1['receive_pkt']) and (res_dict1['pkt_loss'] == '0.00%'):
            res1 = True
        else:
            res1 = False

        if (res_dict2['sent_pkt'] != res_dict2['receive_pkt']) and (res_dict2['pkt_loss'] == '100.00%'):
            res2 = True
        else:
            res2 = False

        if (res1 and res2):
            self.passed("Success: After applied deny and permit rule for acl ping got failed for deny rule and got successful for permit rule")
        else:
            self.failed("Failed: Multiple acl rule are not working")


    @aetest.cleanup
    def unconfigure_acl_on_device(self,testbed):
        logger.info("Unconfigure acl in interface")
        acl_common_functions.unconfigure_acl_interface(uut1,device1['intf'],acl_name,bound)

        logger.info("Unconfigure acl on device3:{}".format(uut1.name))
        acl_common_functions.unconfigure_acl(uut1,acl_name)

#@aetest.skip('testing another testcase')
class acl_testcase_in_out_bound(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self,testbed):

        logger.info("Configure acl on device3:{}".format(uut2.name))
        acl_common_functions.configure_acl(uut2,acl_name,rule1)

        logger.info("Configure acl in interface")
        acl_common_functions.configure_acl_interface(uut2,device2['intf1'],acl_name,bound)

    @aetest.test
    def check_ping_after_in_out_bound_acl(self,testbed):

        logger.info("Check acl configured or not ")
        acl_config = uut2.execute("show access-list {}".format(acl_name))
        logger.info(acl_config)
        if acl_name in acl_config:
            logger.info("ACL configured on device")
        else:
            self.errored('Acl is not configured on device')

        logger.info("Ping the ip configured on device2: {} to check in bound".format(uut3.name))
        for i in range(3):
            result1 = uut2.execute("ping {}".format(device3['ip_address']))
        res_dict1 = acl_common_functions.validate_ping(result1)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict1)
        logger.info("++++++++++++++++++++++++++++")

        if (res_dict1['sent_pkt'] == res_dict1['receive_pkt']) and (res_dict1['pkt_loss'] == '0.00%'):
            res1 = True
        else:
            res1 = False


        logger.info("Unconfigure in bound acl in interface")
        acl_common_functions.unconfigure_acl_interface(uut2,device2['intf2'],acl_name,bound)

        logger.info("Configure out bound acl in interface")
        acl_common_functions.configure_acl_interface(uut2,device2['intf2'],acl_name,bound1)

        logger.info("Ping the ip configured on device2: {}".format(uut3.name))
        for i in range(3):
            result2 = uut2.execute("ping {}".format(device2['ip_address1']))
        res_dict2 = acl_common_functions.validate_ping(result2)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict2)
        logger.info("++++++++++++++++++++++++++++")

        if (res_dict2['sent_pkt'] == res_dict2['receive_pkt']) and (res_dict2['pkt_loss'] == '0.00%'):
            res2 = True
        else:
            res2 = False

        if res1 and res2:
            self.passed("Success: in and out bound working successfully")
        else:
            self.failed("Failed: in and out bound not working")


    @aetest.cleanup
    def unconfigure_acl_on_device(self,testbed):
        logger.info("Unconfigure acl in interface")
        acl_common_functions.unconfigure_acl_interface(uut2,device2['intf2'],acl_name,bound1)

        logger.info("Unconfigure acl on device3:{}".format(uut2.name))
        acl_common_functions.unconfigure_acl(uut2,acl_name)

#@aetest.skip("testing fourth scenario")
class acl_testcase_configured(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self,testbed):

        logger.info("Configure acl on device1:{}".format(uut1.name))
        acl_common_functions.configure_acl(uut1,acl_name,rule2)

    @aetest.test
    def check_acl_configured(self,testbed):
        logger.info("Check acl configured or not ")
        result = uut1.execute("show access-list {}".format(acl_name))
        logger.info(result)

        if result:
            logger.info("acl configured")
            self.passed("Success: acl is configured on device and on interface successfully")
        else:
            logger.info("acl not configured")
            self.failed("Failed: acl is not configured on device and on interface")

    @aetest.cleanup
    def unconfigure_acl_on_device(self,testbed):
        logger.info("Unconfigure acl on device3:{}".format(uut1.name))
        acl_common_functions.unconfigure_acl(uut1,acl_name)

#@aetest.skip("testing fourth scenario")
class acl_testcase_not_configured(aetest.Testcase):

    @aetest.test
    def check_acl__not_configured(self,testbed):
        logger.info("Check acl not configured on device")
        result = uut1.execute("show access-list")
        logger.info(result)

        if acl_name not in result:
            logger.info("acl named {} not configured on device".format(acl_name))
            self.passed("Success: acl {} not configured on device and on interface successfully".format(acl_name))
        else:
            logger.info("acl configured")
            self.failed("Failed: acl is configured on device and on interface")

#@aetest.skip("testing fourth scenario")
class acl_testcase_check_acl_configured_on_interface(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self,testbed):

        logger.info("Configure acl on device1:{}".format(uut1.name))
        acl_common_functions.configure_acl(uut1,acl_name,rule2)

        logger.info("Configure acl in interface")
        acl_common_functions.configure_acl_interface(uut1,device1['intf'],acl_name,bound)

    @aetest.test
    def check_acl_not_configured_on_interface(self,testbed):
        logger.info("Check acl configured on interface")
        result1 = uut1.execute("show running-config interface {}".format(device1['intf']))
        logger.info(result1)

        if acl_name in result1:
            logger.info("acl named {} not configured on interface {}".format(acl_name,device1['intf']))
            self.passed("Success: acl {} not configured on interface {} of device {}".format(acl_name,device1['intf'],uut1.name))
        else:
            logger.info("acl not configured on interface")
            self.failed("Failed : acl {} configured on interface {} of device {}".format(acl_name,device1['intf'],uut1.name))

    @aetest.cleanup
    def unconfigure_acl_on_device(self,testbed):

        logger.info("Unconfigure acl in interface")
        acl_common_functions.unconfigure_acl_interface(uut1,device1['intf'],acl_name,bound)

        logger.info("Unconfigure acl on device3:{}".format(uut1.name))
        acl_common_functions.unconfigure_acl(uut1,acl_name)

#@aetest.skip("testing fourth scenario")
class acl_testcase_check_acl_not_configured_on_interface(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self,testbed):

        logger.info("Configure acl on device1:{}".format(uut1.name))
        acl_common_functions.configure_acl(uut1,acl_name,rule2)

    @aetest.test
    def check_acl_not_configured_on_interface(self,testbed):
        logger.info("Check acl not configured on interface")
        result1 = uut1.execute("show running-config interface {}".format(device1['intf']))
        logger.info(result1)

        if acl_name not in result1:
            logger.info("acl named {} not configured on interface {}".format(acl_name,device1['intf']))
            self.passed("Success: acl {} not configured on interface {} of device {}".format(acl_name,device1['intf'],uut1.name))
        else:
            logger.info("acl not configured on interface")
            self.failed("Failed : acl {} configured on interface {} of device {}".format(acl_name,device1['intf'],uut1.name))

    @aetest.cleanup
    def unconfigure_acl_on_device(self,testbed):

        logger.info("Unconfigure acl on device3:{}".format(uut1.name))
        acl_common_functions.unconfigure_acl(uut1,acl_name)

class CommonCleanup(aetest.CommonCleanup):

    @aetest.subsection
    def unconfigure_rip_on_devices(self,testbed):
        logger.info("Unconfigure rip on interfaces")
        acl_common_functions.unconfigure_rip(uut1,device1['intf'])
        acl_common_functions.unconfigure_rip(uut2,device2['intf1'])
        acl_common_functions.unconfigure_rip(uut2,device2['intf2'])
        acl_common_functions.unconfigure_rip(uut3,device3['intf'])

    @aetest.subsection
    def disable_rip_on_device(self,testbed):
        logging.info("disable rip on devices")
        for uut in device_list:
            acl_common_functions.disable_rip(uut)

    @aetest.subsection
    def unconfigure_ipaddress_device(self,testbed):
        logging.info("Unconfig ip address on interfaces of all devices")
        acl_common_functions.unconfigure_ip_address(uut1,device1['intf'])
        acl_common_functions.unconfigure_ip_address(uut2,device2['intf1'])
        acl_common_functions.unconfigure_ip_address(uut2,device2['intf2'])
        acl_common_functions.unconfigure_ip_address(uut3,device3['intf'])

    @aetest.subsection
    def disconnect(self,testbed):
        logger.info("Disconnect the devices")
        for uut in device_list:
            uut.disconnect()


if __name__ == '__main__':
    import argparse
    from pyats.topology import loader

    parser = argparse.ArgumentParser()
    parser.add_argument('--testbed', dest = 'testbed',
                        type = loader.load)

    args, unknown = parser.parse_known_args()

    aetest.main(**vars(args))





acl_lib.py
----------

from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging
import pdb
from pyats.async_.exceptions import *
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class acl_common_functions():
    def configure_ip_address(device,intf,ip_address,mask):
        device.configure('''int {intf}\n no switchport\nip address {ip_address} {mask}\n no shut\n end'''.format(intf = intf,ip_address = ip_address, mask = mask))

    def unconfigure_ip_address(device,intf):
        device.configure('''int {intf}\n no ip address\n end'''.format(intf=intf))

    def enable_rip(device):
        device.configure('''feature rip\n end''')

    def disable_rip(device):
        device.configure('''no feature rip\n end''')

    def configure_rip(device,intf):
        device.configure('''int {intf}\n router rip 2\n end'''.format(intf=intf))

    def unconfigure_rip(device,intf):
        device.configure('''int {intf}\n no router rip 2\n end'''.format(intf=intf))

    def configure_acl(device,acl_name,rule):
        device.configure('''ip access-list {acl_name}\n {rule}'''.format(acl_name=acl_name,rule=rule))

    def unconfigure_acl(device,acl_name):
        device.configure('''no ip access-list {acl_name}'''.format(acl_name=acl_name))

    def configure_acl_interface(device,intf,acl_name,bound):
        device.configure('''int {intf} \n ip access-group {acl_name} {bound}'''.format(intf=intf,acl_name=acl_name,bound=bound))

    def unconfigure_acl_interface(device,intf,acl_name,bound):
        device.configure('''int {intf} \n no ip access-group {acl_name} {bound}'''.format(intf=intf,acl_name=acl_name,bound=bound))

    def sh_version(input):
        pattern1 = re.compile(' NXOS: version(?P<version>.*)')
        pattern2 = re.compile('  NXOS image file is: (?P<image>.*)')
#        pattern1 = re.compile('  NXOS: version (\d+\.\d+\(\d+\))')
#        pattern2 = re.compile('  NXOS image file is: bootflash:///nxos\.\d+\.\d+\.bin')
        output_dict = {}
        for line in input.split("\n"):
            p1 = pattern1.match(line)
            if p1:
                output_dict.update(p1.groupdict())
            p2 = pattern2.match(line)
            if p2:
                output_dict.update(p2.groupdict())
        return output_dict

    def validate_ping(input):
        pattern = re.compile('(?P<sent_pkt>[0-9]+) packets transmitted, (?P<receive_pkt>[0-9]+) packets received, (?P<pkt_loss>[0-9]+\.[0-9]+\%) packet loss')

        out_dict = {}
        for line in input.split('\n'):
            p1 = pattern.match(line)
            if p1:
                out_dict.update(p1.groupdict())
        return out_dict




acl_job.py
----------

from pyats.easypy import run
import os,atexit,re
import zipfile
import json
import pandas as pd
import openpyxl
from openpyxl.styles import Font,PatternFill
#from log_list import command
global report_dir
global router_name,str1,l

router_name = ['n9k1#','n9k2#','n9k3#','NEXUS9k_4#']
str1 = ['show version', 'show access']
l = []

def report_html():
    global report_dir
    extract_path = "/home/tcs/POC2/PYATS/acl/result/"
    with zipfile.ZipFile(report_dir, 'r') as zip_ref:
        zip_ref.extractall(extract_path)

    html_op_file = "/home/tcs/POC2/PYATS/acl/"

    res_report = os.path.join(extract_path,"acl_job.report")
    with open(res_report,'r') as res:
        lines = res.readlines()

    data = []
    for z in lines:
        parts = z.strip().split(':',1)
        if len(parts) == 2:
            if parts[0].startswith('Task') and len(parts[1].split())>1:
                a = parts[1].split()
                key = parts[0].strip()
                value = a[0].strip()
                status = a[1].strip()
                data.append([key,value,status])
            else:
                if parts[0].startswith('Task') and len(parts[1].split())==1:
                    pass
                else:
                    key,value = parts[0].strip(),parts[1].strip()
                    status = ''
                    data.append([key,value,status])

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(['Attribute','Output','Status'])
    bold_font = Font(bold=True)
    row_num = 1
    for cell in ws[row_num]:
         cell.font = bold_font

    for key in data:
         ws.append([key[0],key[1],key[2]])

    green_fill = PatternFill(start_color = '00FF00', end_color = '00FF00',fill_type = 'solid')
    red_fill = PatternFill(start_color = 'FF0000', end_color = 'FF0000', fill_type = 'solid')
    yellow_fill = PatternFill(start_color = 'FFFF00', end_color = 'FFFF00', fill_type = 'solid')
    default_fill = PatternFill(start_color = 'FFFFFF', end_color = 'FFFFFF', fill_type = 'solid')

    for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=3, max_col=3):
        for cell in row:
            if cell.value == "PASSED":
                cell.fill = green_fill
            elif cell.value == "FAILED":
                cell.fill = red_fill
            elif cell.value == 'ERRORED':
                cell.fill = yellow_fill
            else:
                cell.fill = default_fill

    op_file = os.path.join(html_op_file,'pyxl_report.xlsx')
    wb.save(op_file)

    html_path = os.path.join(html_op_file,'final_report.html')

    df = pd.read_excel(op_file)
    html_table = df.to_html()
    with open(html_path,'w') as html_file:
         html_file.write(html_table)

    print('Link to open HTML report result :',html_path)

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(['Command','Output'])

    pattern = r'TaskLog\.Task-\d+'
    dir_path = '/home/tcs/POC2/PYATS/acl/result/'
    print('Link to view Log results :',dir_path)
    file_list = os.listdir(dir_path)
    file_list.sort()

    matching_file = []

    for f in file_list:
        if re.match(pattern,f):
            matching_file.append(f)

    file_content=[]
    for k in matching_file:
        pt = os.path.join(dir_path,k)
        cont = open(pt).read()
        file_content.append(cont)

   # command(str1,router_name,file_content,ws,l)

    wb.save('output_log.xlsx')

    final_html = open('final.html','w')
    ht = """<html><head><title>Log Result</title></head><body>"""
    for d in l:
        ht = ht + """<p>{}</p><pre>{}</pre>""".format(d[0],d[1])
    ht = ht + '</body></html>'
    final_html.write(ht)
    final_html.close()

    #f_path = os.path.abspath('final.html')
    #print('Link to view Log results :',f_path)

def main(runtime):
    global report_dir
    atexit.register(report_html)
    report_dir = runtime.archive
    script_file = ['acl_testcases.py']
    for x in script_file:
        run(x, datafile = 'acl_datafile.yaml',pdb=True)


